# -*- coding: utf-8 -*-
"""Mover un servo con la mano - Computer vision

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QP5kIs3t8Q9xjkHafuyuYdNQ5X6yKziQ

# Mover un servo con la mano - Computer vision


*   https://www.youtube.com/watch?v=g4_SpZGaszY
*   https://www.automatizacionparatodos.com/vision-artificial-arduino/

## Main (python)
"""

import cv2
import numpy as np
import serial

#COM = '/dev/cu.usbserial-14120'
COM = 'COM4'
BAUD = 9600
ser = serial.Serial(COM, BAUD)

#cap = cv2.VideoCapture(2)
cap = cv2.VideoCapture(0)
lower_color_filter = np.array([98, 100, 28], np.uint8)
upper_color_filter = np.array([120, 255, 255], np.uint8)

while True:
  ret, frame = cap.read()
  if ret:
    frame = cv2.flip(frame, 1)      #hacer un reflejo de la imagen
    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(frame, lower_color_filter, upper_color_filter)
    contornos, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)     #encontrar y realizar contornos sobre los objetos encontrados
    cv2.drawContours(frame, contornos, -1, (255, 0, 0), 4)      # dibujar todos los contornos encontrados (-1) de color rojo

    for c in contornos:
      area = cv2.contourArea(c)
      if area > 6000:       #it can vary
        ## hallar el momento del objeto encontrado(en contorno) para conocer la pos de su centro(x,y) dentro de la imagen
        M = cv2.moments(c)
        if M["m00"] == 0:
          M["m00"] = 1
        x = int(M["m10"] / M["m00"])
        y = int(M["m01"] / M["m00"])

        cv2.circle(frame, (x,y), 7, (0,0,255), -1)      #realizar un circulo sobre la imagen(frame), dado el centro de este(x,y), de radio 7, de color azul(0,0,255) y rellenado(-1)
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(frame, '{},{}'.format(x,y), (x+10, y), font, 1.2, (0,0,255), 2, cv2.LINE_AA)
        nuevo_contorno = cv2.convexHull(c)      #dibujar un trazo que une todas las esquinas del objeto encontrado en la imagen
        cv2.drawContours(frame, [nuevo_contorno], 0, (0,255,0), 3)

        if x < 360:
          print("Mover a la izquierda 100%")
          ser.write(b"izquierda\n")
        elif 360 <= x < 360*2:
          print("Mover al centro")
          ser.write(b"centro\n")
        elif 360*2 <= x <= 360*3:
          print("Mover a la derecha 100%")
          ser.write(b"derecha\n")

    frame = cv2.cvtColor(frame, cv2.COLOR_HSV2BGR)
    cv2.imshow('frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('s'):
      ser.close()
      break
cap.release()
cv2.destroyAllWindows()
